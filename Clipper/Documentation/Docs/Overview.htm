<html>
<head>
  <title>Clipper2 - Polygon Clipping and Offsetting Library</title>
  <meta name="keywords" content="clipper,clipping,clip,intersection,union,polygon,offset,library,algorithm,line"><script type="text/javascript" src="../CodeScripts/SyntaxHighlighter/scripts/shCore.js"></script><script type="text/javascript" src="../CodeScripts/SyntaxHighlighter/scripts/shBrushDelphi.js"></script><script type="text/javascript" src="../CodeScripts/SyntaxHighlighter/scripts/shBrushCpp.js"></script><script type="text/javascript" src="../CodeScripts/SyntaxHighlighter/scripts/shBrushCSharp.js"></script><link rel="stylesheet" type="text/css" href="../Styles/default.css"/><link rel="stylesheet" type="text/css" href="../Menu/menu.css"/><link rel="stylesheet" type="text/css" href="../CodeScripts/SyntaxHighlighter/styles/shCoreDefault.css"/><link rel="stylesheet" type="text/css" href="../CodeScripts/SyntaxHighlighter/styles/shThemeDefault.css"/><meta name="viewport" content="width=device-width, initial-scale=1.0"><script type="text/javascript" src="../Menu/menu.js"></script><script type="text/javascript" src="../CodeScripts/bootstrap.js"></script>
</head>
<body bgcolor="#FFFFFF" onload="OnLoadEvent()">
  <div class="menu" id="menu" onmouseleave="OnMouseLeaveEvent()"><a class="ancestor" href="_Body.htm">Index</a><span class="active">Overview</span><span class="submenu_owner" onmouseover="onSubmenuPopup(this)"><span class="submenu_heading">Units</span>
      <div class="submenu_background"><a href="./Units/Clipper/_Body.htm">Clipper</a><a href="./Units/Clipper.Core/_Body.htm">Clipper.Core</a><a href="./Units/Clipper.Engine/_Body.htm">Clipper.Engine</a><a href="./Units/Clipper.Export/_Body.htm">Clipper.Export</a><a href="./Units/Clipper.Minkowski/_Body.htm">Clipper.Minkowski</a><a href="./Units/Clipper.Offset/_Body.htm">Clipper.Offset</a><a href="./Units/Clipper.RectClip/_Body.htm">Clipper.RectClip</a>
      </div></span><a href="./Robustness.htm">Robustness</a><a href="./USINGZ.htm">USINGZ</a><a href="./FAQ.htm">FAQ</a><a href="./Trigonometry.htm">Trigonometry</a><a class="icon_container" id="icon_container" href="javascript:void(0)" onclick="hamburger()"><img id="menu_icon" src="../Menu/hamburger.svg"></a>
  </div><br><br>

  <h1>Clipper2 - Polygon Clipping and Offsetting Library</h1>
  <h2>Author &amp; copyright:</h2>
  <p> Angus Johnson<br> Copyright &#169; 2010-2024<br> <a href="./License.htm">License, terms and conditions</a><br> </p>
  <h2>Summary:</h2>
  <p> <a href="./_Body.htm"><b>Clipper2</b></a> is an <b>open source freeware</b> software library (written in <b>C++</b>, <b>C#</b> and <b>Delphi Pascal</b>) that performs line and polygon <a href="./Units/Clipper/Types/ClipType.htm"><b>clipping</b></a>, and <a href="./Units/Clipper.Offset/Classes/ClipperOffset/_Body.htm"><b>offsetting</b></a>.<br><br> <b>Clipper2</b> is a major update of my original <a href="https://sourceforge.net/projects/polyclipping/"><b>Clipper </b></a> library which I'm now calling <b>Clipper1</b>. Clipper1 was written over 10 years ago and although it still works very well, Clipper2 is <a href="./Changes.htm">much better</a>. And Clipper2 has all the features of Clipper1 that sets Clipper apart from other polygon clipping libraries, including: 
    <ul>
      <li>being able to clip complex self-intersecting polygons</li>
      <li>support polygons with multiple filling rules (EvenOdd, NonZero, Positive, Negative)</li>
      <li>is numerically robust, and</li>
      <li>is free to use in both freeware and commercial applications</li>
    </ul> </p>
  <h2>Source Code and Compilers:</h2>
  <p> The <b>Clipper</b> library is maintained in three languages - <b>C++</b>, <b>C#</b> and <b>Delphi Pascal</b>. While I do most of the library's development in Delphi, I've made a habit of translating it into <b>C++</b> and <b>C#</b> as a way of developing my skills in these languages too. And as a side benefit, I often find bugs while making these translations.<br><br> The C++ code also contains a <a href="https://github.com/AngusJohnson/Clipper2/blob/main/CPP/Clipper2Lib/include/clipper2/clipper.export.h"><b>header file </b></a> that exports virtually all of the library's features via simple functions. So by compiling this header into a <a href="https://github.com/AngusJohnson/Clipper2/releases/tag/Clipper2_1.0.6_DLL"><b>DLL</b></a> or shared object, the library can be accessed by almost <b>any programming language</b>. And when performance is critical, Delphi and C# users may even prefer accessing the library this way since it'll be faster than the C# or Delphi compiled code (see chart <a href="./Changes.htm">here</a>).<br> 
    <ul>
      <li><span class="Language">Delphi</span>: compiles with any version of Delphi back to <b>Delphi 7</b>.</li>
      <li><span class="Language">C#</span>: core library uses <b>Standard Library 2.0</b> but the sample code uses .NET5</li>
      <li><span class="Language">C++</span>: requires <b>C++17</b> but could easily be modified to C++11.</li>
    </ul> </p>
  <h2>Download:</h2>
  <p> Latest Version: <b>1.3.0</b><br> Last Update: 28 November 2023<br> <a href="https://github.com/AngusJohnson/Clipper2"><b>Download from GitHub</b></a><br> </p>
  <h2 id="terminology">Terminology:</h2>
  <p> <img src="../Images/int.png" alt="" border="0" align="right"> Originally <b>clipping</b> referred to the process of removing or "cutting away" parts of images that were outside a rectangular <i>clipping window</i>. However over time this process has been generalized to include <i>clipping</i> with non-rectangular <i>windows</i>, and to include union, difference and XOR <a href="./Units/Clipper/Types/ClipType.htm"><b>boolean operations</b></a> too. And in this library, instead of raster images being clipped, vector paths (<b>subjects</b>) are clipped with other (<b>clip</b>) vector paths that define the clipping regions.<br><br> <b id="paths">Paths</b> (see <a href="https://www.angusj.com/clipper2/Docs/Units/Clipper/Types/Path64.htm"><b>Path64</b></a> &amp; <a href="https://www.angusj.com/clipper2/Docs/Units/Clipper/Types/PathD.htm"><b>PathD</b></a>) are simply series of straight line <b>segments</b>. These are defined by series of 2D coordinates (aka points or vertices). Paths are <b>open</b> when their ends <i>don't</i> join together. And open paths are sometimes called <b>polylines</b>. Paths are <b>closed</b> when their ends <i>do</i> join (with an implicit line segment between the first and last vertices). Only context will determine whether paths are open or closed. Closed paths are often called <b>polygons</b>, but more accurately, they are simply the <b>contours</b> that outline polygon regions (see below). In this clipping library, <i>subject</i> paths in clipping operations may be open or closed, whereas <i>clip</i> paths must be closed.<br><br> <b>Simple polygons</b> are formed by single closed paths that don't self-intersect. <b id="filling">Complex polygons</b> are polygons that aren't <i>simple</i>, whether because they self-intersect or because they require more than one path to define their enclosed "filling" regions. <b>Polygon holes</b> are any regions inside polygons that aren't filled. <i>Holes</i> are commonly defined by <b>inner</b> polygon contours that are separate from and inside <b>outer</b> polygon contours. While the filling region of a <i>simple polygon</i> is unambiguous, the filling region of a <i>complex polygon</i> is not. So complex polygons require additional information (i.e. a <a href="./Units/Clipper/Types/FillRule.htm"><b>filling rule</b></a>) to fully define which regions are filled, and which are not. In 2D graphics, there are two commonly used filling rules - <i>EvenOdd</i> and <i>NonZero</i>. <span id="touching">&nbsp;</span><br><br> Closed path <b>segments</b> are commonly referred to as <b>edges</b>. Edges are considered <b>touching</b> when they are collinear and overlap, and polygons are <i>touching</i> when they have <i>touching</i> edges.<br> </p>
  <h2 id="coord_range">Coordinate Range:</h2>
  <p> In <i>Clipper2</i> there are now two <i>Clipper</i> classes - <b>Clipper64</b> and <b>ClipperD</b> - that perform all clipping operations. While <i>Clipper64</i> accepts <span class="monobold">Path64</span> paths, and <i>ClipperD</i> accepts <span class="monobold">PathD</span> paths, both these classes still perform clipping operations using integer coordinates internally. This is to ensure <a href="https://en.wikipedia.org/wiki/Robust_geometric_computation" target="_blank"><b>numerical robustness</b></a>. Because of this, <i>ClipperD</i> performs <span class="monobold">double / integer</span> conversions before and after clipping (by scaling and de-scaling coordinates using the specified decimal precision).<br><br> Even though <span class="monobold">Path64</span> paths <i>can</i> be assigned using all 64bits, clipping can't be performed using quite this full range. At a minimum there must be room to allow integer addition and subtraction without overflow. To accommodate this (and the sign bit too), coordinates must at the very least remain within 62bits (&plusmn;4.6 &#215; 10<sup>18
    </sup>). However, as coordinates extend beyond &plusmn;1.0 &#215; 10<sup>15
    </sup>, the algorithm that determines where segments intersect slowly degrades. (There are algorithms that are <a href="https://github.com/AngusJohnson/Clipper2/blob/main/CPP/BenchMark/GetIntersectPtBenchmark.cpp"><b>more accurate</b></a> at the extremes of the coordinate range, but these algorithms are also significantly slower.) Given this flexibility in ranges, and because range checking will affect performance, any range checking is left to the discretion of the library user.<br> </p>
  <h2 id="closed_paths">Clipping closed paths:</h2>
  <p> Clipping operations will always return <a href="./Units/Clipper/Functions/IsPositive.htm"><b>Positive</b></a> oriented solutions (unless the Clipper object's <a href="./Units/Clipper.Engine/Classes/Clipper64/Properties/ReverseSolution.htm"><b>ReverseSolution</b></a> property has been enabled). This means that outer polygon contours will wind anti-clockwise (in Cartesian coordinates), and inner <i>hole</i> contours will wind clockwise. And because paths in clipping solutions never intersect, both <b>EvenOdd</b> and <b>NonZero</b> filling would correctly apply to the solution, though it's usual to apply the same <a href="./Units/Clipper/Types/FillRule.htm"><b>FillRule</b></a> that was applied to the subject and clip paths during clipping. <span id="simplify">&nbsp;</span><br><br> A lot of effort has gone into returning solutions close to their simplest forms, but there's no way to do this perfectly without significantly degrading performance. So there will, on occasions, be solutions with polygons that are <a href="#touching"><b>touching</b></a>. If this is problematic, then a follow up <b>union</b> operation should bring these solutions much closer to their simplest forms.<br><br> The Clipper class's <a href="./Units/Clipper.Engine/Classes/Clipper64/Properties/PreserveCollinear.htm"><b>PreserveCollinear</b></a> property only affects <b>closed paths</b>. Paths will sometimes contain consecutive collinear segments, where the shared vertex can be removed without altering path shape. Removing these vertices simplifies path definitions and is generally (but not always) preferred in clipping solutions. Nevertheless, where consecutive collinear segments create 180 degree 'spikes', these will always be removed from closed solutions.<br> </p>
  <h2 id="open_paths">Clipping open paths:</h2>
  <p> The library supports open path clipping, though only <b>subject</b> paths may be open. Given that open paths have no winding direction, vertex order in open path solutions will match the vertex order in their corresponding subject paths.<br><br> Open path clipping can also be performed concurrently with closed subject paths. Except in <a href="./Units/Clipper/Types/ClipType.htm"><b>union</b></a> operations, the presence of closed subject paths will have no effect on open path solutions. However, in <b>union</b> operations, open paths will be clipped wherever they overlap closed paths (regardless of whether they are subject or clip paths).<br><br> Unlike closed path clipping, there's not always an obvious or "right way" to clip open path segments when they overlap clipping boundaries. In Clipper2, sometimes these segments will be included in clipping solutions, and sometimes not. When the adjacent (ie preceding and succeeding) segments are both inside or both outside the clipping region, then overlapping segments will be included or excluded respectively. However, for segments overlapping clipping boundaries with one adjacent segment inside and the other outside, their inclusion or otherwise in solutions remains undefined.<br> </p>
  <h2 id="usingz">Adding user-defined data to clipping paths:</h2>
  <p> With regard to clipping solutions, occasionally users will need to assign user-defined data to vertices, including those created at path intersections. To facilitate this, the pre-processor directive <a href="./USINGZ.htm"><b>USINGZ</b></a> can be set that adds an <span class="monobold">Int64</span> <span class="monobold2">Z</span> member to vertex definitions (see <a href="./Units/Clipper/Types/Point64.htm"><b>Point64</b></a> and <a href="./Units/Clipper/Types/PointD.htm"><b>PointD</b></a>). <span class="monobold2">Z</span> values can then be assigned to vertices prior to clipping, and during clipping with newly created vertices at points of intersection (ie via a user-defined <a href="./Units/Clipper.Engine/Classes/Clipper64/Properties/ZCallback.htm"><b>ZCallback</b></a> function). Note however, that these <span class="monobold2">Z</span> values are <b>user defined</b> values and shouldn't be confused with 3D geometries and 3D coordinates.)<br> </p>
  <h2>Polygon Offsetting:</h2>
  <p> <img src="../Images/rabbit_offset.svg" alt="" border="0" align="right" width="225px" height="360px" style="vertical-align:middle"> Geometric <b>offsetting</b> refers to the process of creating <a href="https://en.wikipedia.org/wiki/Parallel_curve"><b>parallel curves</b></a> that are offset a specified distance from their starting positions. <br><br> While all offsetting is performed by the <a href="./Units/Clipper.Offset/Classes/ClipperOffset/_Body.htm"><b>ClipperOffset</b></a> class in the <a href="./Units/Clipper.Offset/_Body.htm"><b>Clipper.Offset</b></a> unit, the complexities of constructing and using this class can usually be avoided by using instead the <a href="./Units/Clipper/Functions/InflatePaths.htm"><b>InflatePaths</b></a> function in the <a href="./Units/Clipper/_Body.htm"><b>Clipper</b></a> unit. This function can both inflate and shrink polygons (using positive and negative offsets respectively). Offsetting can be performed using a number of <a href="./Units/Clipper/Types/JoinType.htm"><b>JoinTypes</b></a> and <a href="./Units/Clipper/Types/EndType.htm"><b>EndTypes</b></a>. While both open paths and closed paths can be offset, logically only closed paths can be shrunk (ie with negative offsets).<br><br> Note: Offsetting shouldn't be confused with the process of polygon <a href="https://en.wikipedia.org/wiki/Translation_(geometry)"><b>translation</b></a>. <br></p>
  <h2>References:</h2>
  <p> The Library is based on but significantly extends Bala Vatti's polygon clipping algorithm as described in <a href="https://dl.acm.org/doi/pdf/10.1145/129902.129906" target="_blank">"A generic solution to polygon clipping"</a>, Communications of the ACM, Vol 35, Issue 7 (July 1992) pp 56-63.<br><br> A section in <a href="http://books.google.com/books?q=vatti+clipping+agoston" target="_blank">"Computer graphics and geometric modeling: implementation and algorithms"</a> by By Max K. Agoston (Springer, 2005) discussing <em>Vatti Polygon Clipping</em> was also helpful in creating the initial Clipper implementation.<br><br> The paper titled <a href="https://mcmains.me.berkeley.edu/pubs/DAC05OffsetPolygon.pdf">"Polygon Offsetting by Computing Winding Numbers"</a> by Chen & McMains (Paper no. DETC2005-85513, ASME 2005. Pages 565-575) contains helpful discussion on the complexities of polygon offsetting together with some solutions.<br><br>  </p>
  <h2 id="Auto-SeeAlso">See Also</h2>
  <p class="Body"><a href="_Body.htm"><b>Index</b></a>, <a href="Changes.htm">Changes</a>, <a href="License.htm">License</a>, <a href="Units/Clipper.Engine/Classes/Clipper64/_Body.htm">Clipper64</a>, <a href="Units/Clipper.Engine/Classes/Clipper64/Properties/PreserveCollinear.htm">Clipper64.PreserveCollinear</a>, <a href="Units/Clipper.Engine/Classes/Clipper64/Properties/ReverseSolution.htm">Clipper64.ReverseSolution</a>, <a href="Units/Clipper.Engine/Classes/Clipper64/Properties/ZCallback.htm">Clipper64.ZCallback</a>, <a href="Units/Clipper.Offset/_Body.htm">Clipper.Offset</a>, <a href="Units/Clipper.Offset/Classes/ClipperOffset/_Body.htm">ClipperOffset</a>, <a href="Units/Clipper/_Body.htm">Clipper</a>, <a href="Units/Clipper/Functions/InflatePaths.htm">InflatePaths</a>, <a href="Units/Clipper/Functions/IsPositive.htm">IsPositive</a>, <a href="Units/Clipper/Types/ClipType.htm">ClipType</a>, <a href="Units/Clipper/Types/EndType.htm">EndType</a>, <a href="Units/Clipper/Types/FillRule.htm">FillRule</a>, <a href="Units/Clipper/Types/JoinType.htm">JoinType</a>, <a href="Units/Clipper/Types/Point64.htm">Point64</a>, <a href="Units/Clipper/Types/PointD.htm">PointD</a>, <a href="USINGZ.htm">USINGZ</a></p>
  <p class="Copyright" id="auto"> <br><br> Copyright &#169; 2010-2024 Angus Johnson &#160; - &#160; Clipper2 1.3.0 &#160; - &#160; Help file built on 14 Jan 2024<br><br> </p>

</body>
</html>
