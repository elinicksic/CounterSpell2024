<html>

<head>

  <title>SimplifyPaths</title>

  <meta name="viewport" content="width=device-width, initial-scale=1">
<script type="text/javascript" src="../../../../CodeScripts/SyntaxHighlighter/scripts/shCore.js"></script><script type="text/javascript" src="../../../../CodeScripts/SyntaxHighlighter/scripts/shBrushDelphi.js"></script><script type="text/javascript" src="../../../../CodeScripts/SyntaxHighlighter/scripts/shBrushCpp.js"></script><script type="text/javascript" src="../../../../CodeScripts/SyntaxHighlighter/scripts/shBrushCSharp.js"></script><link rel="stylesheet" type="text/css" href="../../../../Styles/default.css"/><link rel="stylesheet" type="text/css" href="../../../../Menu/menu.css"/><link rel="stylesheet" type="text/css" href="../../../../CodeScripts/SyntaxHighlighter/styles/shCoreDefault.css"/><link rel="stylesheet" type="text/css" href="../../../../CodeScripts/SyntaxHighlighter/styles/shThemeDefault.css"/><meta name="viewport" content="width=device-width, initial-scale=1.0"><script type="text/javascript" src="../../../../Menu/menu.js"></script><script type="text/javascript" src="../../../../CodeScripts/bootstrap.js"></script>
</head>

<body bgcolor="#FFFFFF">
  <div class="menu" id="menu"><a class="ancestor" href="../../../_Body.htm">Index</a><a class="ancestor" href="../_Body.htm">Clipper</a><span class="active">SimplifyPaths</span>
  </div><br><br>

  <h1>SimplifyPaths</h1>
  <p class="Decl"><span class="Language">Delphi</span><b>function</b> SimplifyPath(<b>const</b> path: TPath64; epsilon: double;<br><span class="Language">&nbsp;&nbsp;</span>isClosedPath: Boolean = true): TPath64; <b>overload;</b></p>

  <p class="Decl"><span class="Language">Delphi</span><b>function</b> SimplifyPaths(<b>const</b> paths: TPaths64;<br><span class="Language">&nbsp;&nbsp;</span>epsilon: double; isClosedPath: Boolean = true): TPaths64; <b>overload;</b></p>

  <p class="Decl"><span class="Language">Delphi</span><b>function</b> SimplifyPath(<b>const</b> path: TPathD;<br><span class="Language">&nbsp;&nbsp;</span>epsilon: double; isClosedPath: Boolean = true): TPathD; <b>overload;</b></p>

  <p class="Decl"><span class="Language">Delphi</span><b>function</b> SimplifyPaths(<b>const</b> paths: TPathsD;<br><span class="Language">&nbsp;&nbsp;</span>epsilon: double; isClosedPath: Boolean = true): TPathsD; <b>overload;</b></p><br class="half">

  <p class="Decl"><span class="Language"> C++</span><b>inline</b> Path&lt;T&gt; SimplifyPath(<b>const</b> Path&lt;T&gt;&amp; path, double epsilon,<br><span class="Language">&nbsp;</span>bool isClosedPath = true);</p>

  <p class="Decl"><span class="Language"> C++</span><b>inline</b> Paths&lt;T&gt; SimplifyPaths(<b>const</b> Paths&lt;T&gt;&amp; path, double epsilon,<br><span class="Language">&nbsp;</span>bool isClosedPath = true);</p><br class="half">

  <p class="Decl"><span class="Language">C#&nbsp;</span><b>public static</b> Path64 SimplifyPath(Path64 path, double epsilon, bool isClosedPath = true);</p>

  <p class="Decl"><span class="Language">C#&nbsp;</span><b>public static</b> Paths64 SimplifyPaths(Paths64 path, double epsilon, bool isClosedPath = true);</p>

  <p class="Decl"><span class="Language">C#&nbsp;</span><b>public static</b> PathD SimplifyPath(PathD path, double epsilon, bool isClosedPath = true);</p>

  <p class="Decl"><span class="Language">C#&nbsp;</span><b>public static</b> PathsD SimplifyPaths(PathsD path, double epsilon, bool isClosedPath = true);</p><br class="half">

  <p> <img src="../../../../Images/rabbit_offset.svg" alt="" border="0" style="float: right;"><br> This function removes vertices that are less than the specified <span class="monobold2">epsilon</span> distance from an imaginary line that passes through its 2 adjacent vertices. Logically, smaller epsilon values will be less aggressive in removing vertices than larger epsilon values.<br><br> This function is strongly recommended following <a href="./InflatePaths.htm"><b>offsetting</b></a> (ie inflating/shrinking), especially when offsetting paths multiple times. Offsetting often creates tiny segments that don't improve path quality. Further these tiny segments can be at angles that have been affected by integer rounding. While these tiny segments are too small to be noticeable following a single offset procedure, they can degrade both the shape quality and the performance of subsequent offsets.<br> </p>
  <div class="pseudoTbl">
    <div>C++ Code Sample:
    </div>
    <pre class="brush: cpp;">
  #include "../../Clipper2Lib/clipper.h"
  #include "../../Utils/clipper.svg.h"
  #include "../../Utils/clipper.svg.utils.h"
  ...
  using namespace Clipper2Lib;
    
  int main()
  {
    SvgReader svg_reader;
    svg_reader.LoadFromFile("./rabbit.svg");
    PathsD p = svg_reader.GetPaths(), solution;

    while (p.size())
    {
      //copy each iteration of 'p' into solution until 'p' is no more
      solution.reserve(solution.size() + p.size());
      copy(p.begin(), p.end(), back_inserter(solution));
      
      p = InflatePaths(p, -2.5, JoinType::Round, EndType::Polygon);
      p = SimplifyPaths(p, 0.025);
    }

    SvgAddSolution(svg, solution, false);
    SvgSaveToFile(svg, "rabbit_offset.svg", 338, 540, 0);
  }  
  
    </pre>
  </div>
  <h2 id="Auto-SeeAlso">See Also</h2>
  <p class="Body"><a href="InflatePaths.htm">InflatePaths</a></p>
  <p class="Copyright" id="auto"> <br><br> Copyright &#169; 2010-2024 Angus Johnson &#160; - &#160; Clipper2 1.3.0 &#160; - &#160; Help file built on 14 Jan 2024<br><br> </p>

</body>

</html>