<html>
<head>
  <title>PolyTreeD</title>
  <meta name="Ancestor" content="PolyPathD"><script type="text/javascript" src="../../../../../CodeScripts/SyntaxHighlighter/scripts/shCore.js"></script><script type="text/javascript" src="../../../../../CodeScripts/SyntaxHighlighter/scripts/shBrushDelphi.js"></script><script type="text/javascript" src="../../../../../CodeScripts/SyntaxHighlighter/scripts/shBrushCpp.js"></script><script type="text/javascript" src="../../../../../CodeScripts/SyntaxHighlighter/scripts/shBrushCSharp.js"></script><link rel="stylesheet" type="text/css" href="../../../../../Styles/default.css"/><link rel="stylesheet" type="text/css" href="../../../../../Menu/menu.css"/><link rel="stylesheet" type="text/css" href="../../../../../CodeScripts/SyntaxHighlighter/styles/shCoreDefault.css"/><link rel="stylesheet" type="text/css" href="../../../../../CodeScripts/SyntaxHighlighter/styles/shThemeDefault.css"/><meta name="viewport" content="width=device-width, initial-scale=1.0"><script type="text/javascript" src="../../../../../Menu/menu.js"></script><script type="text/javascript" src="../../../../../CodeScripts/bootstrap.js"></script>
</head>
<body bgcolor="#FFFFFF">
  <div class="menu" id="menu"><a class="ancestor" href="../../../../_Body.htm">Index</a><a class="ancestor" href="../../_Body.htm">Clipper.Engine</a><span class="active">PolyTreeD</span>
  </div><br><br>

  <h1>PolyTreeD</h1>
  <h2>Ancestors</h2>
  <div class="Hierarchy">PolyPathBase
  </div>
  <div class="Hierarchy">&nbsp;&nbsp;&nbsp;|
  </div>
  <div class="Hierarchy"><a href="../PolyPathD/_Body.htm">PolyPathD</a>
  </div><br><br>
  <p class="Body"> <b>PolyTreeD</b> is a <b>read-only</b> data structure that receives <em>solutions</em> from clipping operations. It's an alternative to the <a href="../../../Clipper/Types/PathsD.htm">PathsD</a> data structure which also receives solutions. However the principle advantage of PolyTreeD over <em>PathsD</em> is that it also represents the <b>parent-child relationships</b> of the polygons in the solution (where a parent's <a href="../PolyPathD/Properties/Polygon.htm"><b>Polygon</b></a> will contain all its children Polygons).<br><br> The PolyTreeD object that's to receive a clipping solution is passed as a parameter to <a href="../ClipperD/Functions/Execute.htm"><b>ClipperD.Execute</b></a>. When the clipping operation finishes, this object will be populated with data representing the clipped solution.<br><br> A <b>PolyTreeD</b> object is a container for any number of <b>PolyPathD</b> child objects, each representing a single polygon contour. Direct descendants of PolyTreeD will always be <a href="../../../../Overview.htm#terminology">outer</a> polygon contours. PolyPathD children may in turn contain their own children to any level of nesting. Children of outer polygon contours will always represent holes, and children of holes will always represent nested outer polygon contours.<br><br> <b>PolyTreeD</b> is a specialised <b>PolyPathD</b> object that's simply as a container for other PolyPathD objects and its own polygon property will always be empty.<br><br> <b>PolyTreeD</b> will never contain <b>open</b> paths (unlike in <b>Clipper1</b>) since open paths can't contain paths. When clipping open paths, these will always be represented in solutions via a separate <a href="../../../Clipper/Types/PathsD.htm"><b>PathsD</b></a> structure.<br><br> </p>
  <p> 
    <div class="pseudoTbl">
      <div>Example1:
      </div>
      <pre class="brush: cpp;">
  // create a very simple "subject" consisting of 
  // just 4 unnested polygons
  PathsD subject;
  subject.Add(MakePathD({10,10 40,10, 40,40, 10,40}));
  subject.Add(MakePathD({60,10 90,10, 90,40, 60,40}));
  subject.Add(MakePathD({10,60 40,60, 40,90, 10,90}));
  subject.Add(MakePathD({60,60 90,60, 90,90, 60,90}));
  
  // union "subject" and put the result into a polytree;
  PolyTreeD polytree;
  ClipperD cD;
  cD.AddSubject(subject);
  cD.Execute(ClipType.Union, FillRule.NonZero, polytree);
  
  // display polytree and its structure ...
      </pre>
    </div> </p>
  <p><img src="../../../../../Images/polytree1.svg" alt="" border="0"></p>
  <p> <b>
      <pre>
    Polytree 1:
       +- Polygon
       +- Polygon
       +- Polygon
       +- Polygon

      </pre></b> </p>
  <p> 
    <div class="pseudoTbl">
      <div>Example2:
      </div>
      <pre class="brush: cpp;">
  // create "subject" consisting of multiple nested
  // polygon contours
  PathsD subject;
  subject.Add(MakePathD({0,0 100,0, 100,100, 0,100}));
  // add several holes (note reversed orientation)
  subject.Add(MakePathD({10,10 10,30, 25,30, 25,10}));
  subject.Add(MakePathD({40,10 40,30, 55,30, 55,10}));
  subject.Add(MakePathD({70,10 70,30, 85,30, 85,10}));
  subject.Add(MakePathD({10,40 10,90, 90,90, 90,40}));
  // add 2 nested outer polygons inside one of the holes
  subject.Add(MakePathD({20,45 80,45, 80,75, 20,75}));
  subject.Add(MakePathD({20,80 80,80, 80,85, 20,85}));
  // and holes inside one of these nested polygons
  subject.Add(MakePathD("30,50, 30,70, 45,70, 45,50"));
  subject.Add(MakePathD("55,50, 55,70, 70,70, 70,50"));
  
  // union "subject" and put the result into a polytree;
  PolyTreeD polytree;
  ClipperD cD;
  cD.AddSubject(subject);
  cD.Execute(ClipType.Union, FillRule.NonZero, polytree);
  
  // display polytree and its structure ...
      </pre>
    </div> </p>
  <p><img src="../../../../../Images/polytree2.svg" alt="" border="0"></p>
  <p> <b>
      <pre>
    Polytree 2:
       +- Polygon with 4 holes.
          +- Hole with 2 nested polygons.
          |  +- Polygon
          |  +- Polygon with 2 holes.
          |     +- Hole
          |     +- Hole
          +- Hole
          +- Hole
          +- Hole

      </pre></b> </p>
  <p> <b class="maroon">Note: Since the PolyTreeD's structure is much more complex than <i>PathsD</i>'s structure, it'll take quite a bit longer to populate, so clipping operations will be roughly 10% slower. Because of this, it's better to use the PathsD structure in clipping operations unless the parent-child relationships of the returned polygons is important.</b>  </p>
  <h2 id="Auto-Reference">Reference</h2>
  <p>
    <table class="autoTbl">
      <tr>
        <th>Methods</th>
        <th style="width: 100%;">Properties</th>
      </tr>
      <tr>
        <td colspan="2" class="ancestor">In PolyPathD:
        </td>
      </tr>
      <tr>
        <td><a href="../PolyPathD/Functions/Clear.htm">Clear</a>
        </td>
        <td><a href="../PolyPathD/Properties/Child.htm">Child</a>
        </td>
      </tr>
      <tr>
        <td>
        </td>
        <td><a href="../PolyPathD/Properties/Count.htm">Count</a>
        </td>
      </tr>
      <tr>
        <td>
        </td>
        <td><a href="../PolyPathD/Properties/IsHole.htm">IsHole</a>
        </td>
      </tr>
      <tr>
        <td>
        </td>
        <td><a href="../PolyPathD/Properties/Level.htm">Level</a>
        </td>
      </tr>
      <tr>
        <td>
        </td>
        <td><a href="../PolyPathD/Properties/Polygon.htm">Polygon</a>
        </td>
      </tr>
    </table></p>
  <h2 id="Auto-SeeAlso">See Also</h2>
  <p class="Body"><a href="../../../../Overview.htm">Overview</a>, <a href="../ClipperD/Functions/Execute.htm">ClipperD.Execute</a>, <a href="../PolyTree64/_Body.htm">PolyTree64</a>, <a href="../../../Clipper/Types/PathsD.htm">PathsD</a></p>
  <p class="Copyright" id="auto"> <br><br> Copyright &#169; 2010-2024 Angus Johnson &#160; - &#160; Clipper2 1.3.0 &#160; - &#160; Help file built on 14 Jan 2024<br><br> </p>

</body>
</html>