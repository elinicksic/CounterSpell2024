<html>
<head>
  <title>ZCallback</title><script type="text/javascript" src="../../../../../../CodeScripts/SyntaxHighlighter/scripts/shCore.js"></script><script type="text/javascript" src="../../../../../../CodeScripts/SyntaxHighlighter/scripts/shBrushDelphi.js"></script><script type="text/javascript" src="../../../../../../CodeScripts/SyntaxHighlighter/scripts/shBrushCpp.js"></script><script type="text/javascript" src="../../../../../../CodeScripts/SyntaxHighlighter/scripts/shBrushCSharp.js"></script><link rel="stylesheet" type="text/css" href="../../../../../../Styles/default.css"/><link rel="stylesheet" type="text/css" href="../../../../../../Menu/menu.css"/><link rel="stylesheet" type="text/css" href="../../../../../../CodeScripts/SyntaxHighlighter/styles/shCoreDefault.css"/><link rel="stylesheet" type="text/css" href="../../../../../../CodeScripts/SyntaxHighlighter/styles/shThemeDefault.css"/><meta name="viewport" content="width=device-width, initial-scale=1.0"><script type="text/javascript" src="../../../../../../Menu/menu.js"></script><script type="text/javascript" src="../../../../../../CodeScripts/bootstrap.js"></script>
</head>
<body bgcolor="#FFFFFF">
  <div class="menu" id="menu"><a class="ancestor" href="../../../../../_Body.htm">Index</a><a class="ancestor" href="../../../_Body.htm">Clipper.Engine</a><a class="ancestor" href="../_Body.htm">ClipperD</a><span class="active">ZCallback</span>
  </div><br><br>

  <h1>ClipperD.ZCallback</h1>
  <p class="Decl"><span class="Language">Delphi</span> <b>property</b> ZCallback: <a href="../../../../Clipper/Types/ZCallbackD.htm">TZCallbackD</a> <span class="comment">//read &amp write;</span></p>
  <p class="Decl"><span class="Language">C++</span> <b>void</b> SetZCallback( <a href="../../../../Clipper/Types/ZCallbackD.htm">ZCallbackD</a> cb);</p>
  <p class="Decl"><span class="Language">C#&nbsp;</span> <b>public</b> <a href="../../../../Clipper/Types/ZCallbackD.htm"> ZCallbackD</a> ZCallback { <b>get</b>; <b>set</b>; };</p><br class="half">
  <p> <span class="maroon">This property is only exposed when the pre-processor directive <b>USINGZ</b> has been defined.</span> If this is the case, an <span class="monobold">Int64</span> <span class="monobold2">Z</span> member will be included in the definitions of both the <a href="../../../../Clipper/Types/Point64.htm">Point64</a> and <a href="../../../../Clipper/Types/PointD.htm">PointD</a> classes. (This <span class="monobold2">Z</span> member is for user defined data and has nothing to do with 3D clipping.)<br><br> While most vertices in clipping solutions will correspond to input (subject and clip) vertices, there will also be new vertices wherever these segments intersect. This callback facilitates assigning user-defined <span class="monobold2">Z</span> values at these intersections. To aid the user in determining appropriate <span class="monobold2">Z</span> values, the function receives the vertices at both ends of the intersecting segments (ie four vertices). <i>Subject</i> vertices will be listed before <i>clip</i> vertices in the callback's parameter list. </p>
  <p> In the following examples, use the Z callback to flag intersections (Z = 1) and differentiate them from non-intersection vertices (default Z = 0).<br><br> 
    <div class="pseudoTbl">
      <div><b>C++ Example:</b>
      </div>
      <pre class="brush: cpp;">
    using namespace Clipper2Lib;
    
    // option1 - static callback function
    void myZCBD(const PointD& e1bot, const PointD& e1top,
      const PointD& e2bot, const PointD& e2top, PointD& pt)
    {
      pt.z = 1;
    }

      
    // option2 - class member callback function
    class MyClass {
    public:
      
      // PointD callback - see TestingZ_Double()
      void myZCBD(const PointD& e1bot, const PointD& e1top,
        const PointD& e2bot, const PointD& e2top, PointD& pt)
      {
        pt.z = 1;
      }
    };

        
    int main()
    {
    
    PathsD subject, solution;
    subject.push_back(MakePathD(
      {100, 50, 10, 79, 65, 2, 65, 98, 10, 21}));

    MyClass mc;
    ClipperD c;
    c.AddSubject(subject);
    
    //option 1: static function assignment
    c.SetZCallback(myZCB);
    
    /*  
    // option 2: class member function assignment
    c.SetZCallback(
      std::bind(&MyClass::myZCBD, mc, std::placeholders::_1,
        std::placeholders::_2, std::placeholders::_3,
        std::placeholders::_4, std::placeholders::_5));
    */
    
    c.Execute(ClipType::Union, FillRule::NonZero, solution);

    // display result
    SvgWriter svg;
    SvgAddSubject(svg, subject, FillRule::NonZero);
    SvgAddSolution(svg, solution, FillRule::NonZero, true);
    // draw a red circle around any intersections
    for (const auto& sol_path : solution)
    {
      if (sol_path.empty()) continue;
      PathsD ellipses;
      const double r = 3.0;
      for (const PointD& pt : sol_path)
        if (pt.z) ellipses.push_back(
          Ellipse(RectD(pt.x - r, pt.y - r, pt.x + r, pt.y + r), 11));
      svg.AddPaths(ellipses, false, 
        FillRule::NonZero, 0x20FF0000, 0xFFFF0000, 1, false);
    }
    SvgSaveToFile(svg, "usingz_D.svg", 600, 600, 20);
    }  
  
      </pre>
    </div> </p>
  <p> 
    <div class="pseudoTbl">
      <div><b>C# Example:</b>
      </div>
      <pre class="brush: csharp;">
    using Clipper2Lib;

    public class Application
    {
      public class MyCallbacks
      {
        public void MyCallbackD(PointD bot1, PointD top1,
          PointD bot2, PointD top2, ref PointD intersectPt)
        {
          intersectPt.Z = 1;
        }
      }

      public static void Main()
      {
        PathsD solution = new PathsD();
        PathsD subject = new PathsD();
        subject.Add(Clipper.MakePathD(
          new int[] { 100, 50, 10, 79, 65, 2, 65, 98, 10, 21 }));

        ClipperD c = new ClipperD();
        MyCallbacks cb = new MyCallbacks();
        c.ZCallback = cb.MyCallbackD;
        c.AddSubject(subject);
        c.Execute(ClipType.Union, FillRule.NonZero, solution);

        SvgWriter svg= new SvgWriter();
        SvgUtils.AddSubject(svg, subject);
        SvgUtils.AddSolution(svg, solution, false);
        // draw a red circle around any intersections
        for (int i = 0; i &lt; solution[0].Count; i++)
        {
          if (solution[0][i].Z == 1)
            svg.DrawCircle(solution[0][i].X, solution[0][i].Y, 
              4, 1, 0x20FF0000, 0xFFFF0000);
        }
        svg.SaveToFile("usingz.svg", 400, 400);
      }
  
      </pre>
    </div> </p>
  <p><img src="../../../../../../Images/none2.svg" alt="" border="0">&nbsp;&nbsp; <img src="../../../../../../Images/usingz.svg" alt="" border="0"></p>
  <h2 id="Auto-SeeAlso">See Also</h2>
  <p class="Body"><a href="../../../../Clipper/Types/Point64.htm">Point64</a>, <a href="../../../../Clipper/Types/PointD.htm">PointD</a>, <a href="../../../../Clipper/Types/ZCallbackD.htm">ZCallbackD</a></p>
  <p class="Copyright" id="auto"> <br><br> Copyright &#169; 2010-2024 Angus Johnson &#160; - &#160; Clipper2 1.3.0 &#160; - &#160; Help file built on 14 Jan 2024<br><br> </p>

</body>
</html>