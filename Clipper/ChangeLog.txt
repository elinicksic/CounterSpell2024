===================
Clipper2 Change Log
===================

ver. 1.4.0
13 Jul. 2024
  Multiple minor bugfixes (see GitHub repository revisions #744..#867)
  
ver. 1.3.0
28 Nov. 2023
  1. Fixed a significant offsetting bug introduced in previous update (#733)
  2. Fixed a C++ compile error when 32bit compiling (#727)
  3. Minor tweak to CMakeLists.txt (C++) (#728)
  4. Will now offset 'flat' polygons (Disc.#725)
  5. Reminder: recent change in open path offsetting behaviour (#707)
  6. Reminder: recent changes to clipper.export.h data structures.

ver. 1.2.4
26 Nov. 2023
  1. Important: Offsetting open path behaviour has changed. 
     The delta now behaves as it did in Clipper1 (See Issue #707)
  2. Important: Data structures of exported values in clipper.export.h have changed.
  3. Minor bugfixes to PolyTree nesting (#679, #687)
  4. Numerous minor bugfixes to polygon offsetting (#703, #715, #724)
  5. Fixed an obscure bug in polygon clipping caused by horizontal spikes (#720)
  6. Significantly improved documentation.

ver. 1.2.3
1 Oct. 2023
  Minor update. (Bugfixes between #466 and #668)

ver. 1.2.2
26 Mar 2023
    Numerous minor bug fixes: #422-#465

ver. 1.2.0
26 Feb 2023
    Numerous minor bug fixes including:
    #396, #399, #398, #401, #402, #405, #406, #407, #408, #411, #416, #418
  
ver. 1.1.0
27 Jan 2023  
  1. much improved merging of 'touching' polygons in clipping solutions
  2. updated RectClip function that performs much faster intersect clipping 
     when the clipping region is rectangular
  3. numerous minor bug fixes  

ver. 1.0.6
28 Oct 2022
  1. Added RectClip and RectClipLines functions for FAST rectangular clipping
  2. Added clipper.export.h C++ file (for DLL/so creation)
  3. Added DLL project files and Delphi test app.
  4. Numerous minor bug fixes.

ver. 1.0.5 
2 Oct 2022
  1. Numerous improvements to C++ makefile and revised C++ folder structure (#243, #247)
  2. Fixed bug in C++ Point<T> constructor when USINGZ defined (#246)
  3. Improved performance by removing time costly round() function calls (#236)
  4. Changed Library's C# target framework back to netstandard2.0 (#225)
  5. Updated several sample apps.

